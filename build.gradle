plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.ajoberstar.grgit' version '2.3.0'
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://maven.neoforged.net/releases" }
    maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    mavenCentral()
    jcenter()
    flatDir {
        dir 'libs'
    }
    maven { url ="https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"}
    maven { url ="https://maven.impactdev.net/repository/development/"}
    maven { url ="https://hub.spigotmc.org/nexus/content/groups/public/"}
    maven { url ="https://thedarkcolour.github.io/KotlinForForge/"}
}

mixin { add sourceSets.main, "thutessentials.refmap.json" }

ext {
    VERSION_COMPILE = "${version_compile}"
    // Force a refresh of the toml file
    cleanTOML()
}

version = "${version_minecraft}-${VERSION_COMPILE}"
group = '${compile_group}'
archivesBaseName = "${compile_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "${channel_mappings}", version: "${version_mappings}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    runs {
        client = {
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            properties '-XX': '+UnlockCommercialFeatures'
            properties '-XX': '+FlightRecorder'
            properties 'forge.logging.console.level': 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            properties '-XX': '+UnlockCommercialFeatures'
            properties '-XX': '+FlightRecorder'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        data = {
            workingDirectory project.file('run').canonicalPath
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', '${mod_id}', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]
            source sourceSets.main
        }
    }
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    minecraft "net.neoforged:forge:${version_minecraft}-${version_forge}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Here we import the version of pokecube to use.
    implementation fg.deobf("curse.maven:pokecube-aoi-${version_pokecube}")
    
    //Computer Craft Support.
    implementation fg.deobf("curse.maven:cc-tweaked-${version_cct}")

    // Curios - Wearables Support
    implementation fg.deobf("curse.maven:curios-${version_curios}")
    
    //WHYLA
    //implementation fg.deobf("curse.maven:jade-${version_jade}")
    
    //JEI
    implementation fg.deobf("curse.maven:jei-${version_jei}")
    
    //Journeymap
    //implementation fg.deobf("curse.maven:journeymap-${version_journeymap}")
    
    // Serene Seasons Support
    implementation fg.deobf("curse.maven:sereneseasons-${version_sereneseasons}")
    
    //Thut Essentials
    implementation fg.deobf("curse.maven:thutessentials-${version_thutessentials}")
    
    // Beyond Earth
    //implementation fg.deobf("curse.maven:beyond_earth-${version_beyond_earth}")
    
    //Minecolonies
    implementation "blank:minecolonies-1.20.1-1.1.240-RELEASE-api"

    // Cobblemon
    implementation fg.deobf("com.cobblemon:forge:1.4.0+1.20.1-SNAPSHOT")
    implementation fg.deobf("thedarkcolour:kotlinforforge:4.5.0")
}

processResources.doLast {
    def TOMLFILE = "./build/resources/main/META-INF/mods.toml"
    replaceParameters(TOMLFILE, "version_pc", "${version_pcsupport}")
    replaceParameters(TOMLFILE, "version_mc", "${version_mcsupport}")
}

def replaceParameters(filename, find, replace) {
    ant.replace(file:filename,token:find,value:replace)
}

// Example for how to get properties into the manifest for reading by the runtime..
tasks.named('jar', Jar).configure {
    manifest {
        attributes 'FMLAT': 'accesstransformer.cfg',
        "Specification-Title": "${compile_name}",
        "Specification-Vendor": "${author_name}",
        "Specification-Version": VERSION_COMPILE,
        "Implementation-Title": project.name,
        "Implementation-Version": VERSION_COMPILE,
        "Implementation-Vendor" :"${author_name}",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }
}

def cleanTOML()
{
    delete "./build/resources/main/META-INF/mods.toml" 
}