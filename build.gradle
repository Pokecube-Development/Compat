buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        flatDir {
          dirs 'libs'
        }
        maven {url='https://repo.spongepowered.org/repository/maven-public/'}
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
  id 'org.ajoberstar.grgit' version '2.3.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

eclipseJdtApt.enabled = false
eclipseFactoryPath.enabled = false

ext {
    VERSION_COMPILE = "${version_compile}"
    // Force a refresh of the toml file
    cleanTOML()
}

version = "${version_minecraft}-${VERSION_COMPILE}"
group = '${compile_group}'
archivesBaseName = "${compile_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "${channel_mappings}", version: "${version_mappings}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    runs {
        client = {
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            properties '-XX': '+UnlockCommercialFeatures'
            properties '-XX': '+FlightRecorder'
            properties 'forge.logging.console.level': 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            properties '-XX': '+UnlockCommercialFeatures'
            properties '-XX': '+FlightRecorder'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        data = {
            workingDirectory project.file('run').canonicalPath
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', '${mod_id}', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]
            source sourceSets.main
        }
    }
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    flatDir {
        dirs 'libs'
    }
    maven { // Computer Craft
        url 'https://squiddev.cc/maven/' 
    }
    //TODO check dependency
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "https://maven.tehnut.info"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
      }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // Minecolonies
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${version_minecraft}-${version_forge}"

    // Here we import the version of pokecube to use. Note that the curseforge page is 'aoi' rather than 'aio'
    implementation fg.deobf("curse.maven:pokecube-aoi-${version_pokecube}")
    
    //Computer Craft Support.
    implementation fg.deobf("org.squiddev:cc-tweaked-${version_cct_mc}:${version_cct}")
    
    //Thut Essentials
    implementation "${depstr_thutessentials}"
    
    //WHYLA
    implementation fg.deobf("curse.maven:Jade-${version_jade}")
    
    //Minecolonies
    implementation "blank:minecolonies-1.17.1-1.0.23-ALPHA-api"

    // Curios - Wearables Support
    implementation fg.deobf("curse.maven:curios-${version_curios}")

    // Serene Seasons Support
    implementation fg.deobf("curse.maven:serene-seasons-${version_sereneseasons}")
    
    //JEI
    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${version_jei_mc}:${version_jei}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${version_jei_mc}:${version_jei}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "FMLAT": "accesstransformer.cfg",
            "Specification-Title": "${compile_name}",
            "Specification-Vendor": "${author_name}",
            "Specification-Version": VERSION_COMPILE,
            "Implementation-Title": project.name,
            "Implementation-Version": VERSION_COMPILE,
            "Implementation-Vendor" :"${author_name}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources.doLast {
    def TOMLFILE = "./build/resources/main/META-INF/mods.toml"
    replaceParameters(TOMLFILE, "version_pc", "${version_pcsupport}")
    replaceParameters(TOMLFILE, "version_mc", "${version_mcsupport}")
}

def replaceParameters(filename, find, replace) {
    ant.replace(file:filename,token:find,value:replace)
}

def cleanTOML()
{
    delete "./build/resources/main/META-INF/mods.toml" 
}